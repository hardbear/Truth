复盘：
L是Sodaine看的第一题。手推了两个样例后给出了错误的结论，两个样例都推错了，赛后讨论认为这是前期打崩的开始。
榜上过了很多M后着急地开始跟榜看M的题意（！跟榜慌乱地看题在五一集训时就总结过，其实前期根本不需要在乎少量的罚时差异，稳定好自己的节奏比较重要！）
Sodaine在看M的时候，hongzhiyin过来转达C的题意，因为认为这题更适合她推。当时Sodaine手上存着L和正在看的M，C题知道题意后被押后了。
然后经历了，M题意看不懂，换hongzhiyin读题，Sodaine脑子里还在押着L
M题再换到Seaster知道题意之后，才出做法，开始上机写。
通过之后写L的错误结论，L提交WA掉后，Sodaine和Seaster短暂交流后继续在原有的错误结论上推进，hongzhiyin提醒后才去先写C题
C题是公式转接，并不是推公式的人写代码，发生了公式写错，题目样例给错，耽误了一段时间之后才第一发提交，还WA掉了
这时情况是慌乱的，但是从始至终推C题公式的人都没有认真完备地考虑过这题，只是给出了其中的主要公式，但是还有细节要顾及
然后变成了第三个人进来，去理解推出来的公式查找问题，找到问题之后修改代码还改错了，样例跑错没人看出来
中间Seaster发现了L结论的问题，查C的代码的同时终于进行了L的打表工作，之后才分别通过L和C
D题题意转达的时候漏了条件，导致复杂度变大，考虑觉得没有什么别的做法之后尝试用bitset优化莽一发，提交之后RE了，因为bitset用的少不确定是否可能会RE，
查看代码觉得没什么问题，但是查看的时候关注点主要集中在bitset的部分，RE可能是因为爆栈的概念也很不强烈，忽略了前期预处理的部分
之后复看题意才发现漏掉的条件，这时Seaster和hongzhiyin认为应该重新写代码，花费的时间可能会小于调试的时间。但是实际Sodaine重写代码的时候，
注意力甚至没有第一次写的时候集中，忘记了初始化以及最关键的dfs出错的地方还是复制过来的。后来才发现dfs的问题才通过这题，其实即使没发现漏掉的条件，
这题第一发也应该要通过了。
这时候才终于结束水题的部分真正进入中期题，seaster很快给了J和H的做法，H丢给了hongzhiyin去想实现，然后认为J是点分治，开始找板子，调C的时候还让hongzhiyin
抄了后面没用上的部分板子。（！Seaster需要注意去整理自己的板子！）
H和J都花了很多时间在实现上，最后时间非常紧张的时候，seaster开始脑子混乱，推不清楚J的计算，让Sodaine帮忙解决，
但是否认了她提供的做法，因为认为她不知道前面的部分，这部分的答案应该是错的。Sodaine帮hongzhiyin出样例看代码找不出bug之后比赛就结束了。
。
总结:
虽然比赛结束后我们讨论了很久，但是真正写完复盘过程的时候我才发现自己这场状态真的不太好。主要原因应该是，这场前期题偏多，因为L搞错，
整个前期都没有单独完整地思考一道题，做每道题的时候脑子里都还压着另一题，尤其是MCL。
后期的时候，因为我说我不会点分治，J题甚至题意我都不知道，然后Seaster要崩了的时候想让我帮他推我才听了题意，才开始想，马上给出了普通树形dp的做法，
此时Seaster产生了我不理解这题的想法，加上时间紧张，导致后面再试图交流的时候他无法接受我的做法。
。
对策：
前期题尽量单开，如果读到认为队友更擅长的题目，跟队友指出题号后，转去先读其他题，尽量不要单人多线程。
码量超过30min或最后2h的题目，一定要让至少一个队友知道核心算法。
